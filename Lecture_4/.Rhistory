log(100)
#log(base = exp(1))
log(exp(1)^3, exp(1))
log(base = 10, x = 100)
# function 'paste_together' can paste two strings together
paste_together <- function (...) {
# your code here
paste(x+y)
}
# Test your function by executing the code below
# paste two variables and create a new string
paste_together("house number", 110)
# function 'paste_together' can paste two strings together
paste_together <- function (x, y) {
# your code here
paste(x+y)
}
# Test your function by executing the code below
# paste two variables and create a new string
paste_together("house number", 110)
# function 'paste_together' can paste two strings together
paste_together <- function (x, y) {
# your code here
paste(x, y)
}
# Test your function by executing the code below
# paste two variables and create a new string
paste_together("house number", 110)
# use a vector for one of the arguments
paste_together("letter", LETTERS)
# function 'paste_together' can paste two strings together
paste_together <- function (x, y) {
# your code here
paste(x, y)
}
# Test your function by executing the code below
paste_together
# paste two variables and create a new string
paste_together("house number", 110)
# use a vector for one of the arguments
paste_together("letter", LETTERS)
for (i in 1:10){
print(i)
}
# my cool new function
# my_func <- function(x){
#
# total <- 0
#
# for (x:x+10) {
# total <- ...
#}
#
# total # return total
#}
# test your new function
# my_func(2)
# my cool new function
# my_func <- function(x){
#
# total <- 0
#
# for (x:x+10) {
# total <- squared_plus(x)
#}
#
# total # return total
#}
# test your new function
# my_func(2)
# my cool new function
# my_func <- function(x){
#
# total <- 0
#
# for (x:x+10) {
# total <- squared_plus(x)
#}
#
# total # return total
#}
# test your new function
# my_func(2) <- squared_plus(X)
# my cool new function
my_func <- function(x){
#
total <- 0
#
# for (x:x+10) {
# total <- squared_plus(x)
#}
#
# total # return total
#}
# test your new function
# my_func(2) <- squared_plus(X)
# my cool new function
# my_func <- function(x){
#
# total <- 0
#
for (x:x+10) {
# my cool new function
# my_func <- function(x){
#
# total <- 0
#
for (x:x+10) {
# my cool new function
# my_func <- function(x){
#
# total <- 0
#
for (x in x+10) {
squared_plus(x)
}
# my cool new function
# my_func <- function(x){
#
# total <- 0
#
for (y in x+10) {
squared_plus(y)
}
# my cool new function
# my_func <- function(x){
#
# total <- 0
#
for (x in 1:10) {
squared_plus(x)
}
# my cool new function
# my_func <- function(x){
#
# total <- 0
#
for (x in 1:10) {
square_plus(x)
}
#
# total # return total
#}
# test your new function
# my_func(2) <- squared_plus(X)
# my cool new function
# my_func <- function(x){
#
# total <- 0
#
for (x in 1:10) {
square_plus(x)
}
#
total # return total
# function 'paste_together' can paste two strings together
paste_together <- function (x, y) {
# your code here
paste(x, y)
}
# Test your function by executing the code below
paste_together
# paste two variables and create a new string
paste_together("house number", 110)
# use a vector for one of the arguments
paste_together("letter", LETTERS)
# my cool new function
my_func <- function(x){
total <- 0
for (x in 1:10) {
total <- x + square_plus(x)
print(total)
}
#
# total # return total
#}
# test your new function
# my_func(2)
my_func <- function(x){
total <- 0
for (x in 1:10) {
total <- x + square_plus(x)
print(total)
}
total <- 10
}
my_func(2)
# Exercise 5
The variance of a set of numbers X is a **statistic** (a number that is derived from other numbers using a statistical procedure or algorithm) that quantifies the amount of spread in the values. Informally, it measures how far a set of numbers is spread out from their average value.
my_func <- function(x){
total <- 0
for (x in 1:10) {
total <- x + square_plus(x)
print(total)
}
total <- 10
}
my_func(2)
vec <- c(2, 4, 6, 9)
# my cool new function
my_func <- function(x){
x * (N/n-1)
}
# test your function,
N <- length(vec)
corr <- N/(N-1)
my_func(vec) * corr
# my cool new function
my_func <- function(x){
x * (N/N-1)
}
# test your function,
N <- length(vec)
corr <- N/(N-1)
my_func(vec) * corr
# should be equal
var(vec)
# my cool new function
my_func <- function(x){
Variance(X) = mean(X^2) - (mean(X))^2
}
# test your function,
N <- length(vec)
corr <- N/(N-1)
my_func(vec) * corr
# my cool new function
my_func <- function(x){
Variance(x) = mean(x^2) - (mean(x))^2
}
# test your function,
N <- length(vec)
corr <- N/(N-1)
my_func(vec) * corr
library(readr)
clothing_exports_aggregated <- read_csv("sourcedata/clothing_exports_aggregated.rds")
View(clothing_exports_aggregated)
View(clothing_exports_aggregated)
readRDS("sourcedata/clothing_exports_aggregated.rds")
# my cool new function
my_func <- function(x){
mean(vec^2) - (mean(vec))^2
}
# test your function,
N <- length(vec)
corr <- N/(N-1)
my_func(vec) * corr
# should be equal
var(vec)
readRDS("sourcedata/clothing_exports_aggregated.rds") %>%
filter(year == 2018)
df_tmp <- df_2018 %>% filter(reporter_iso == "chn") %>%
group_by(year) %>% slice_max(order_by = export_value_usd, n = 5)
df_2018 <-readRDS("sourcedata/clothing_exports_aggregated.rds") %>%
filter(year == 2018)
df_tmp <- df_2018 %>% filter(reporter_iso == "chn") %>%
group_by(year) %>% slice_max(order_by = export_value_usd, n = 5)
# extract country name from dataset
country_name <- unique(df_tmp$reporter_fullname_english)
plot_title <- paste("Top five countries that", country_name, "exports clothing to")
ggplot(df_tmp, aes(x = reorder(partner_fullname_english, export_value_usd), y = export_value_usd)) +
geom_point() +
expand_limits(y = 0) +
ggtitle(plot_title) +
xlab("Importing country") +
ylab("Export value (x billion dollars)") +
coord_flip()
plot_top_five_receiving_countries(...){
plot_top_five_receiving_countries(...)
knitr::opts_chunk$set(echo = FALSE)
library(rmarkdown)
plot_top_five_receiving_countries(data_Frame, country_code){
plot_top_five_receiving_countries <- function(df2, country_code){
# code from the previous chunk adjusted to deal with any given country code
df_tmp <- df2() %>% filter(reporter_iso == country_code) %>%
group_by(year) %>% slice_max(order_by = export_value_usd, n = 5)
# extract country name from dataset
country_name <- unique(df_tmp$reporter_fullname_english)
plot_title <- paste("Top five countries that", country_name, "exports clothing to")
ggplot(df_tmp, aes(x = reorder(partner_fullname_english, export_value_usd), y = export_value_usd)) +
geom_point() +
expand_limits(y = 0) +
ggtitle(plot_title) +
xlab("Importing country") +
ylab("Export value (x billion dollars)") +
coord_flip()
}
plot_top_five_receiving_countries <- function(df2, country_code){
# code from the previous chunk adjusted to deal with any given country code
df_tmp <- df2() %>% filter(reporter_iso == country_code) %>%
group_by(year) %>% slice_max(order_by = export_value_usd, n = 5)
# extract country name from dataset
country_name <- unique(df_tmp$reporter_fullname_english)
plot_title <- paste("Top five countries that", country_name, "exports clothing to")
ggplot(df_tmp, aes(x = reorder(partner_fullname_english, export_value_usd), y = export_value_usd)) +
geom_point() +
expand_limits(y = 0) +
ggtitle(plot_title) +
xlab("Importing country") +
ylab("Export value (x billion dollars)") +
coord_flip()
}
View(plot_top_five_receiving_countries)
plot_top_five_receiving_countries <- function(df2, country_code){
# code from the previous chunk adjusted to deal with any given country code
df_tmp <- df2() %>% filter(reporter_iso == country_code) %>%
group_by(year) %>% slice_max(order_by = export_value_usd, n = 5)
# extract country name from dataset
country_name <- unique(df_tmp$reporter_fullname_english)
plot_title <- paste("Top five countries that", country_name, "exports clothing to")
ggplot(df_tmp, aes(x = reorder(partner_fullname_english, export_value_usd), y = export_value_usd)) +
geom_point() +
expand_limits(y = 0) +
ggtitle(plot_title) +
xlab("Importing country") +
ylab("Export value (x billion dollars)") +
coord_flip()
}
plot_top_five_receiving_countries(df_2018, country_code = "deu")
plot_top_five_receiving_countries(df2, country_code = "deu")
plot_top_five_receiving_countries(df_2018, country_code = "deu")
plot_top_five_receiving_countries <- function(df2, country_code){
# code from the previous chunk adjusted to deal with any given country code
df_tmp <- df2() %>% filter(reporter_iso == country_code) %>%
group_by(year) %>% slice_max(order_by = export_value_usd, n = 5)
# extract country name from dataset
country_name <- unique(df_tmp$reporter_fullname_english)
plot_title <- paste("Top five countries that", country_name, "exports clothing to")
ggplot(df_tmp, aes(x = reorder(partner_fullname_english, export_value_usd), y = export_value_usd)) +
geom_point() +
expand_limits(y = 0) +
ggtitle(plot_title) +
xlab("Importing country") +
ylab("Export value (x billion dollars)") +
coord_flip()
}
plot_top_five_receiving_countries(df_2018, country_code = "deu")
plot_top_five_receiving_countries <- function(df2, country_code){
# code from the previous chunk adjusted to deal with any given country code
df_tmp <- df2() %>% filter(reporter_iso == country_code) %>%
group_by(year) %>% slice_max(order_by = export_value_usd, n = 5)
country_name <- unique(df_tmp$reporter_fullname_english)
plot_title <- paste("Top five countries that", country_name, "exports clothing to")
ggplot(df_tmp, aes(x = reorder(partner_fullname_english, export_value_usd), y = export_value_usd)) +
geom_point() +
expand_limits(y = 0) +
ggtitle(plot_title) +
xlab("Importing country") +
ylab("Export value (x billion dollars)") +
coord_flip()
}
plot_top_five_receiving_countries <- function(df2, country_code){
# code from the previous chunk adjusted to deal with any given country code
df_tmp <- df2 %>% filter(reporter_iso == country_code) %>%
group_by(year) %>% slice_max(order_by = export_value_usd, n = 5)
# extract country name from dataset
country_name <- unique(df_tmp$reporter_fullname_english)
plot_title <- paste("Top five countries that", country_name, "exports clothing to")
ggplot(df_tmp, aes(x = reorder(partner_fullname_english, export_value_usd), y = export_value_usd)) +
geom_point() +
expand_limits(y = 0) +
ggtitle(plot_title) +
xlab("Importing country") +
ylab("Export value (x billion dollars)") +
coord_flip()
}
plot_top_five_receiving_countries(df_2018, country_code = "deu")
countries <- c("chn", "bgd", "deu", "ita", "ind")
# your code here
for plot_top_five_receiving_countries(countries){
# your code here
for plot_top_five_receiving_countries("countries"){
# your code here
for plot_top_five_receiving_countries("countries"){
# your code here
for plot_top_five_receiving_countries(){
# your code here
for `plot_top_five_receiving_countries("countries")`{
# Your code here
library(tidyverse)
my_data <- c(1,2,3, NA)
mean(my_data)
mean(my_data, na.rm = FALSE)
mean(my_data, na.rm = TRUE)
log(x = 100, 10)
log(100)
#log(base = exp(1))
log(exp(1)^3, exp(1))
log(base = 10, x = 100)
square <- function(x){
x * x
}
a <- 3
square(a)
b <- c(1, 3)
square(b)
square_plus <- function(x, y = 1){
x * x + y
}
# use 2 arguments
square_plus(3, 5)
# use the default for the second argument
square_plus(3)
# function 'paste_together' can paste two strings together
paste_together <- function (x, y) {
# your code here
paste(x, y)
}
# Test your function by executing the code below
paste_together
# paste two variables and create a new string
paste_together("house number", 110)
# use a vector for one of the arguments
paste_together("letter", LETTERS)
my_func <- function(x){
total <- 0
for (x in 1:10) {
total <- x + square_plus(x)
print(total)
}
total <- 10
}
my_func(2)
vec <- c(2, 4, 6, 9)
# my cool new function
my_func <- function(x){
mean(vec^2) - (mean(vec))^2
}
# test your function,
N <- length(vec)
corr <- N/(N-1)
my_func(vec) * corr
# should be equal
var(vec)
df_2018 <-readRDS("sourcedata/clothing_exports_aggregated.rds") %>%
filter(year == 2018)
df_tmp <- df_2018 %>% filter(reporter_iso == "chn") %>%
group_by(year) %>% slice_max(order_by = export_value_usd, n = 5)
# extract country name from dataset
country_name <- unique(df_tmp$reporter_fullname_english)
plot_title <- paste("Top five countries that", country_name, "exports clothing to")
ggplot(df_tmp, aes(x = reorder(partner_fullname_english, export_value_usd), y = export_value_usd)) +
geom_point() +
expand_limits(y = 0) +
ggtitle(plot_title) +
xlab("Importing country") +
ylab("Export value (x billion dollars)") +
coord_flip()
plot_top_five_receiving_countries <- function(df2, country_code){
# code from the previous chunk adjusted to deal with any given country code
df_tmp <- df2 %>% filter(reporter_iso == country_code) %>%
group_by(year) %>% slice_max(order_by = export_value_usd, n = 5)
# extract country name from dataset
country_name <- unique(df_tmp$reporter_fullname_english)
plot_title <- paste("Top five countries that", country_name, "exports clothing to")
ggplot(df_tmp, aes(x = reorder(partner_fullname_english, export_value_usd), y = export_value_usd)) +
geom_point() +
expand_limits(y = 0) +
ggtitle(plot_title) +
xlab("Importing country") +
ylab("Export value (x billion dollars)") +
coord_flip()
}
plot_top_five_receiving_countries(df_2018, country_code = "deu")
countries <- c("chn", "bgd", "deu", "ita", "ind")
# your code here
for (i in 1:length(countries)){
cname <- countries[i]
plot_top_five_receiving_countries(df_2018, country_code = cname)
}
# your code here
for (i in 1:length(countries)){
cname <- countries[i]
plot_top_five_receiving_countries(df_2018, country_code = cname)
}
for (i in 1:length(countries)){
cname <- countries[i]
plot_top_five_receiving_countries(df_2018, country_code = cname)
}
View(plot_top_five_receiving_countries)
knitr::opts_chunk$set(echo = FALSE)
library(rmarkdown)
# Here your code
1 + 1
plot(cars)
The dataset `mtcars` contains `r nrow(mtcars)` records of car models.
plot(cars)
mtcars contains(nrow(mtcars))
plot(cars)
contains(nrow(mtcars))
library(ggplot2)
ggplot(mtcars, aes(x =  mpg)) +
geom_histogram()
library(ggplot2)
ggplot(mtcars, aes(x =  mpg)) +
geom_histogram()
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
ggplot(mtcars, aes(x =  mpg)) +
geom_histogram()
# function 'paste_together' can paste two strings together
paste_together <- function (x, y) {
# your code here
paste(x, y)
}
# Test your function by executing the code below
paste_together
# paste two variables and create a new string
paste_together("house number", 110)
# use a vector for one of the arguments
paste_together("letter", LETTERS)
